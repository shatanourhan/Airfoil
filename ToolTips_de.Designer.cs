//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BezierAirfoilDesigner.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ToolTips_de {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ToolTips_de() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BezierAirfoilDesigner.Properties.ToolTips_de", typeof(ToolTips_de).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Automatisch nach gut passenden Kontrollpunkten für beide Kurven suchen.
        ///Es werden rekursiv 3 andere Punkte pro Kontrollpunkt ausprobiert.
        ///Der Suchradius ist Error / 100 (nur vertikal).
        ///Wenn da nichts besseres dabei war, werden 4 andere Punkte pro Kontrollpunkt probiert. Und so weiter.
        ///Wenn die Verbesserung durch andere Positionen der Kontrollpunkte unter 10% liegt, wird der Grad der Kurve um 1 erhöht.
        ///Dann wieder suchen.
        ///So lange, bis der Error unter 0.075 liegt.
        ///Die Suche kann mit der Stopp-Taste un [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string btnAutoSearch {
            get {
                return ResourceManager.GetString("btnAutoSearch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Passt den Zoom an die dargestellten Daten an. ähnelt.
        /// </summary>
        internal static string btnAxisAuto {
            get {
                return ResourceManager.GetString("btnAxisAuto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Den Grad der unteren Bezierkurve verringern, während die Form beibehalten wird. ähnelt.
        /// </summary>
        internal static string btnDecreaseOrderBottom {
            get {
                return ResourceManager.GetString("btnDecreaseOrderBottom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Den Grad der oberen Bezierkurve verringern, während die Form beibehalten wird. ähnelt.
        /// </summary>
        internal static string btnDecreaseOrderTop {
            get {
                return ResourceManager.GetString("btnDecreaseOrderTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Standard Kontrollpunkte laden. ähnelt.
        /// </summary>
        internal static string btnDefault {
            get {
                return ResourceManager.GetString("btnDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Den Grad der unteren Bezierkurve erhöhen, während die Form beibehalten wird. ähnelt.
        /// </summary>
        internal static string btnIncreaseOrderBottom {
            get {
                return ResourceManager.GetString("btnIncreaseOrderBottom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Den Grad der oberen Bezierkurve erhöhen, während die Form beibehalten wird. ähnelt.
        /// </summary>
        internal static string btnIncreaseOrderTop {
            get {
                return ResourceManager.GetString("btnIncreaseOrderTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Kontrollpunkte aus einer .bez Datei laden. ähnelt.
        /// </summary>
        internal static string btnLoadBez {
            get {
                return ResourceManager.GetString("btnLoadBez", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Kontrollpunkte aus einer .bez.dat Datei laden. ähnelt.
        /// </summary>
        internal static string btnLoadBezDat {
            get {
                return ResourceManager.GetString("btnLoadBezDat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ein Referenzprofil aus einer .dat Datei laden. Rechtsklick zum entfernen. ähnelt.
        /// </summary>
        internal static string btnLoadDat {
            get {
                return ResourceManager.GetString("btnLoadDat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Speichern der aktuellen Kontrollpunkte als .bez-Datei.
        ///Das Format unterscheidet sich von normalen .dat-Dateien.
        ///Die Kontrollpunkte am Nasen- und Endleiste müssen für die oberen und unteren Kurven nicht identisch sein.
        ///Dies ermöglicht die Definition anderer Formen durch Bezierkurven, zum Beispiel den Flügelgrundriss.
        ///Derzeit nicht von anderer Software unterstützt, aber theoretisch ein besseres Dateiformat.
        ///Beispiel Dateiformat:
        ///
        ///Airfoil Name
        ///Top Start
        ///0.00000000 0.00000000
        ///0.00000000 0.15000000
        ///0. [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string btnSaveBez {
            get {
                return ResourceManager.GetString("btnSaveBez", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Speichern der aktuellen Kontrollpunkte als .bez.dat Datei.
        ///Das Format ist identisch mit normalen .dat Dateien.
        ///Erlaubt das einfache Importieren der Kontrollpunkte in die meisten anderen Programme.
        ///Beispiel Dateiformat:
        ///
        ///Airfoil Name
        ///1.00000000 0.00000000
        ///0.50000000 0.15000000
        ///0.00000000 0.15000000
        ///0.00000000 0.00000000
        ///0.00000000 -0.10000000
        ///0.50000000 -0.10000000
        ///1.00000000 0.00000000 ähnelt.
        /// </summary>
        internal static string btnSaveBezDat {
            get {
                return ResourceManager.GetString("btnSaveBezDat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die aktuellen Kurven als .dat Datei speichern. ähnelt.
        /// </summary>
        internal static string btnSaveDat {
            get {
                return ResourceManager.GetString("btnSaveDat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Nach besseren Kontrollpunkten für die untere Kurve suchen.
        ///
        ///Rechtsklick, um eine einzelne Suche durchzuführen. ähnelt.
        /// </summary>
        internal static string btnSearchBottom {
            get {
                return ResourceManager.GetString("btnSearchBottom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Nach besseren Kontrollpunkten für die obere Kurve suchen.
        ///
        ///Rechtsklick, um eine einzelne Suche durchzuführen. ähnelt.
        /// </summary>
        internal static string btnSearchTop {
            get {
                return ResourceManager.GetString("btnSearchTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Eine Partikel-Schwarm-Optimierung für die untere Kurve starten. ähnelt.
        /// </summary>
        internal static string btnStartPSOBottom {
            get {
                return ResourceManager.GetString("btnStartPSOBottom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Eine Partikel-Schwarm-Optimierung für die obere Kurve starten. ähnelt.
        /// </summary>
        internal static string btnStartPSOTop {
            get {
                return ResourceManager.GetString("btnStartPSOTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die aktuelle Suche abbrechen. ähnelt.
        /// </summary>
        internal static string btnStopSearch {
            get {
                return ResourceManager.GetString("btnStopSearch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die untere Kurve anzeigen oder ausblenden. ähnelt.
        /// </summary>
        internal static string chkShowBottom {
            get {
                return ResourceManager.GetString("chkShowBottom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Wölbungslinie anzeigen oder ausblenden. ähnelt.
        /// </summary>
        internal static string chkShowCamber {
            get {
                return ResourceManager.GetString("chkShowCamber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Kontrollpunkte für die untere Kurve anzeigen oder ausblenden. ähnelt.
        /// </summary>
        internal static string chkShowControlBottom {
            get {
                return ResourceManager.GetString("chkShowControlBottom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Kontrollpunkte für die obere Kurve anzeigen oder ausblenden. ähnelt.
        /// </summary>
        internal static string chkShowControlTop {
            get {
                return ResourceManager.GetString("chkShowControlTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Den Radius an der Vorderkante anzeigen oder ausblenden. ähnelt.
        /// </summary>
        internal static string chkShowRadius {
            get {
                return ResourceManager.GetString("chkShowRadius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Unterseite des Referenzprofils anzeigen oder ausblenden. ähnelt.
        /// </summary>
        internal static string chkShowReferenceBottom {
            get {
                return ResourceManager.GetString("chkShowReferenceBottom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Oberseite des Referenzprofils anzeigen oder ausblenden. ähnelt.
        /// </summary>
        internal static string chkShowReferenceTop {
            get {
                return ResourceManager.GetString("chkShowReferenceTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Dickenverteilung anzeigen oder ausblenden. ähnelt.
        /// </summary>
        internal static string chkShowThickness {
            get {
                return ResourceManager.GetString("chkShowThickness", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die obere Kurve anzeigen oder ausblenden. ähnelt.
        /// </summary>
        internal static string chkShowTop {
            get {
                return ResourceManager.GetString("chkShowTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Position festlegen, an der die Wölbungslinie berechnet wird. ähnelt.
        /// </summary>
        internal static string txtCamberPosition {
            get {
                return ResourceManager.GetString("txtCamberPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Schrittweite festlegen, mit der die Wölbungslinie berechnet wird. ähnelt.
        /// </summary>
        internal static string txtCamberStepSize {
            get {
                return ResourceManager.GetString("txtCamberStepSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Legt die Profiltiefe fest, mit der die Koordinaten exportiert werden. ähnelt.
        /// </summary>
        internal static string txtChord {
            get {
                return ResourceManager.GetString("txtChord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Anzahl der Punkte auf der unteren Bezierkurve festlegen. ähnelt.
        /// </summary>
        internal static string txtNumOfPointBottom {
            get {
                return ResourceManager.GetString("txtNumOfPointBottom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Anzahl der Punkte auf der oberen Bezierkurve festlegen. ähnelt.
        /// </summary>
        internal static string txtNumOfPointsTop {
            get {
                return ResourceManager.GetString("txtNumOfPointsTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Den Schrittweite festlegen, mit der die Dickenlinie berechnet wird. ähnelt.
        /// </summary>
        internal static string txtThicknessStepSize {
            get {
                return ResourceManager.GetString("txtThicknessStepSize", resourceCulture);
            }
        }
    }
}
